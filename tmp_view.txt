    defaultTimesScrollDoneRef.current = true;
  }, [currentStep.id, transitionStage]);





  const renderStepContent = () => {
    switch (currentStep.id) {
      case 'direction':
        if (!isDirectionSelection) {
          return null;
        }
        return (
          <div className="direction-select">
            <div className="direction-grid" role="list">
              {DIRECTION_OPTIONS.map((option, index) => {
                const isActive = formData.courseDirection === option.id;
                return (
                  <button
                    key={option.id}
                    type="button"
                    role="listitem"
                    className={`direction-card ${isActive ? 'active' : ''}`}
                    style={{ '--card-index': index }}
                    onClick={() => {
                      setFormData((previous) => ({
                        ...previous,
                        courseDirection: option.id,
                        learningGoal: option.label,
                      }));
                    }}
                  >
                    <span className="direction-card__icon" aria-hidden="true">
                      {DIRECTION_ICONS[option.id] || <FaEllipsisH />}
                    </span>
                    <span className="direction-card__title">{option.label}</span>
                  </button>
                );
              })}
            </div>
          </div>
        );
      case 'details':
        return (
          <div className="step-field-stack">
            <label className="field-label" htmlFor="courseFocus">想重点提升的内容</label>
            <textarea
              id="courseFocus"
              placeholder="例如： Biomedical Engineering这门课的Quiz1和Quiz2需要讲解。"
              value={formData.courseFocus}
              onChange={handleChange('courseFocus')}
              rows={5}
            />

            <label className="field-label" htmlFor="milestone">希望达成的目标或里程碑</label>
            <textarea
              id="milestone"
              type="text"
              placeholder="例如：6周后期末考试稳分达到A"
              value={formData.milestone}
              onChange={handleChange('milestone')}
            />
          </div>
        );
      case 'schedule': {
        return (
          <div className="step-field-stack">
            <label className="field-label" htmlFor="availability">选择首课时区</label>
            <TimeZoneSelect
              id="availability"
              value={formData.availability}
              onChange={handleChange('availability')}
              options={orderedTimeZoneOptions}
            />
            <div className="calendar-card" aria-label="可授课时间日历">
              <div className="calendar-header">
                <div className="month-label">{monthLabel}</div>
                <div className="calendar-nav">
                  <button                                           // 上一月按钮
                    type="button"                                   // 按钮类型
                    className="nav-btn"                             // 样式类
                    aria-label="Prev month"                         // 无障碍说明
                    disabled={viewMonth.getFullYear() === todayStart.getFullYear() && viewMonth.getMonth() === todayStart.getMonth()} // 禁用到本月前
                    onClick={handlePrevMonth}                       // 使用封装好的上一月函数
                  >&lsaquo;</button>

                  <button                                           // 下一月按钮
                    type="button"                                   // 按钮类型
                    className="nav-btn"                             // 样式类
                    aria-label="Next month"                         // 无障碍说明
                    onClick={handleNextMonth}                       // 使用封装好的下一月函数
                  >&rsaquo;</button>

                </div>
              </div>
              <div className="calendar-grid">
                {zhDays.map((d) => (
                  <div key={d} className="day-name">{d}</div>
                ))}
                {buildCalendarGrid.map(({ date, outside }) => {
                  if (outside) {
                    return <div key={date.toISOString()} className="date-cell outside" aria-hidden />;
                  }
                  const isToday = isSameDay(date, new Date());
                  const selected = isSameDay(date, selectedDate);
                  const isPast = (() => {
                    const d = new Date(date);
                    d.setHours(0, 0, 0, 0);
                    return d.getTime() < todayStart.getTime();
                  })();
                  const cls = [
                    'date-cell',
                    isToday ? 'today' : '',
                    selected ? 'selected' : '',
                    isPast ? 'past' : '',
                  ].filter(Boolean).join(' ');
                  return (
                    <button
                      key={date.toISOString()}
                      type="button"
                      className={cls}
                      onClick={() => {
                        setSelectedDate(date);
                        if (date.getMonth() !== viewMonth.getMonth() || date.getFullYear() !== viewMonth.getFullYear()) {
                          setViewMonth(new Date(date.getFullYear(), date.getMonth(), 1));
                        }
                      }}
                    >
                      <span className="date-number">{date.getDate()}</span>
                    </button>
                  );
                })}
              </div>
            </div>
          </div>
        );
      }
      case 'contact':
        return (
          <div className="step-field-stack">
            <div className="inline-fields">
              <div className="inline-field">
                <label className="field-label" htmlFor="contactName">称呼</label>
                <input
                  id="contactName"
                  type="text"
                  placeholder="填写你的姓名或昵称"
                  value={formData.contactName}
                  onChange={handleChange('contactName')}
                />
              </div>
              <div className="inline-field">
                <label className="field-label" htmlFor="contactMethod">联系偏好</label>
                <select id="contactMethod" value={formData.contactMethod} onChange={handleChange('contactMethod')}>
                  <option value="微信">微信</option>
                  <option value="邮箱">邮箱</option>
                  <option value="手机号">手机号</option>
                </select>
              </div>
            </div>

            <label className="field-label" htmlFor="contactValue">联系方式</label>
            <input
              id="contactValue"
              type="text"
              placeholder="请输入你的微信号、邮箱或手机号"
              value={formData.contactValue}
              onChange={handleChange('contactValue')}
            />

            <p className="helper-text">信息仅用于 MentorX 学习顾问联系你，不会对外公开。</p>
          </div>
        );
      default:
        return null;
    }
  };

  if (isCompleted) {
    const completionClassName = ['completion-content', transitionClassName].filter(Boolean).join(' ');
    return (
      <div className="course-request-page">        <main className={completionClassName}>
          <div className="completion-card">
            <h2>提交成功！</h2>
            <p>我们已经收到你的课程需求，学习顾问会在 24 小时内与你取得联系。</p>
            <div className="completion-actions">
              <button type="button" onClick={() => navigate('/student')}>
                返回学生首页
              </button>
              <button
                type="button"
                onClick={() => {
                  startPageTransition(() => {
                    setIsCompleted(false);
                    setCurrentStepIndex(0);
                    setIsDirectionSelection(false);
                  });
                }}
                disabled={transitionStage !== 'idle'}
              >
                重新填写
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  }

  //const isDirectionStep = currentStep.id === 'direction';
  //const isDirectionSelectionStage = isDirectionStep && isDirectionSelection;

  return (
    <div className="course-request-page">
      <main className="request-flow">
        <div className="request-shell">
          <header className="step-header">
            <BrandMark to="/student" />
            <div className="step-header-actions">
              <button type="button" className="ghost-button">保存并退出</button>
            </div>
          </header>

          <section className={stepLayoutClassName}>
            <div className={stepContentClassName}>
              <div className="step-intro">
                {!isDirectionSelectionStage && (
                  <React.Fragment>
                    <span className="step-label">{currentStep.label}</span>
                    <h1>{currentStep.title}</h1>
                  </React.Fragment>
                )}
                <p className={`step-description ${isDirectionSelectionStage ? 'direction-question' : ''}`}>
                  {isDirectionSelectionStage
                    ? '以下哪一项最准确描述了你希望提升的课程？'
                    : currentStep.description}
                </p>
              </div>

              {isDirectionStep ? (
                isDirectionSelectionStage ? renderStepContent() : null
              ) : (
                isDetailsStep ? null : <div className="step-fields">{renderStepContent()}</div>
              )}
            </div>

            {!isDirectionSelectionStage && (
              isDetailsStep ? (
                <div className="details-right-panel">
                  {renderStepContent()}
                </div>
              ) : isScheduleStep ? (
                <div className="schedule-right-panel">
                  <div className="schedule-sidebar">
                    <div className="calendar-card slim" aria-label="可授课时间日历">
                      <div className="calendar-header">
                        <div className="month-label">{monthLabel}</div>
                        <div className="calendar-nav">
                          <button type="button" className="nav-btn" aria-label="Prev month" disabled={viewMonth.getFullYear() === todayStart.getFullYear() && viewMonth.getMonth() === todayStart.getMonth()} onClick={handlePrevMonth}>&lsaquo;</button>
                          <button type="button" className="nav-btn" aria-label="Next month" onClick={handleNextMonth}>&rsaquo;</button>
                        </div>
                      </div>
                      <div key={monthSlideKey}                           // 每次切月都改变 key，强制重挂载以触发动画
                        className={`calendar-grid ${                  // 绑定基础类与方向动画类
                          monthSlideDir === 'left'                    // 如果方向是 'left'（点“下一月”）
                            ? 'slide-in-left'                         // 新月份从右向中滑入
                            : monthSlideDir === 'right'               // 如果方向是 'right'（点“上一月”）
                            ? 'slide-in-right'                        // 新月份从左向中滑入
                            : ''                                      // 没有方向时，不加动画类
                        }`}
                      >
                        {zhDays.map((d) => (
                          <div key={d} className="day-name">{d}</div>
                        ))}
                        {buildCalendarGrid.map(({ date, outside }) => {
                          if (outside) {
                            return <div key={date.toISOString()} className="date-cell outside" aria-hidden />;
                          }
                          const isToday = isSameDay(date, new Date());
                          const key = ymdKey(date);
                          const selected = isSameDay(date, selectedDate);
                          const hasSelection = !!(daySelections[ymdKey(date)] && daySelections[ymdKey(date)].length);
                          const isPast = (() => {
                            const d = new Date(date);
                            d.setHours(0, 0, 0, 0);
                            return d.getTime() < todayStart.getTime();
                          })();
                          const inMultiSelected = (selectedRangeKeys || []).includes(key);
                          // Avoid preview style overriding selected/multi-selected cells
                          const inPreview = (dragPreviewKeys && dragPreviewKeys.size)
                            ? (dragPreviewKeys.has(key) && !selected && !inMultiSelected)
                            : false;
                          const cls = [
                            'date-cell',
                            isToday ? 'today' : '',
                            selected ? 'selected' : '',
                            isPast ? 'past' : '',
                            inMultiSelected ? 'multi-selected' : '',
                            inPreview ? 'range-preview' : '',
                          ].filter(Boolean).join(' ');
                          return (
                            <button
                              key={date.toISOString()}
                              type="button"
                              className={cls}
                              onMouseDown={() => {
                                if (isPast) return;
                                const k = ymdKey(date);
                                setIsDraggingRange(true);
                                setDragStartKey(k);
                                setDragEndKey(k);
                                setDragPreviewKeys(new Set([k]));
                                didDragRef.current = false;
                              }}
                              onMouseEnter={() => {
                                if (!isDraggingRange) return;
                                if (isPast) return;
                                const k = ymdKey(date);
                                setDragEndKey(k);
                                const keys = enumerateKeysInclusive(dragStartKey || k, k);
                                setDragPreviewKeys(new Set(keys));
                                if (dragStartKey && dragStartKey !== k) didDragRef.current = true;
                              }}
                              onMouseUp={() => {
                                if (isDraggingRange) endDragSelection();
                              }}
                              onClick={() => {
                                if (didDragRef.current) { didDragRef.current = false; return; }
                                setSelectedDate(date);
                                const k = ymdKey(date);
                                setSelectedRangeKeys([k]);
                                if (date.getMonth() !== viewMonth.getMonth() || date.getFullYear() !== viewMonth.getFullYear()) {
                                  setViewMonth(new Date(date.getFullYear(), date.getMonth(), 1));
                                }
                              }}
                            >
                              <span className="date-number">{date.getDate()}</span>
                              {hasSelection && <span className="date-marker" aria-hidden />}
                            </button>
                          );
                        })}
                      </div>
                    </div>
                    {(() => {
                      const key = ymdKey(selectedDate);
                      const blocks = daySelections[key] || [];
                      const handleBlocksChange = (next) => {
                        const targets = (selectedRangeKeys && selectedRangeKeys.length) ? selectedRangeKeys : [key];
                        setDaySelections((prev) => {
                          const patch = { ...prev };
                          for (const k of targets) patch[k] = next;
                          return patch;
                        });
                      };
                      return (
                        <ScheduleTimesPanel
                          value={formData.sessionDurationHours}
                          onChange={(next) => setFormData((prev) => ({ ...prev, sessionDurationHours: next }))}
                          listRef={timesListRef}
                          blocks={blocks}
                          onBlocksChange={handleBlocksChange}
                          dayKey={key}
                          getDayBlocks={getBlocksForDay}
                          setDayBlocks={setBlocksForDay}
                          applyKeys={(selectedRangeKeys && selectedRangeKeys.length) ? selectedRangeKeys : undefined}
                        />
                      );
                    })()}
                  </div>
                </div>
              ) : (
                <div className="step-illustration" aria-label="插图预留区域">
                  <div className="illustration-frame">
                    <Suspense fallback={<div />}> 
                      <DotLottiePlayer
                        src="/illustrations/Morphing.lottie"
                        autoplay
                        loop
                        style={{ width: '100%', height: '100%', background: 'transparent' }}
                      />
                    </Suspense>
                  </div>
                </div>
              )
            )}
          </section>

          <footer className={stepFooterClassName}>
            <div className="step-footer-shell">
              <div className="step-progress">
                <div className="progress-track">
                  <div className="progress-bar" style={{ width: `${progress}%` }} />
                </div>
              </div>

              <div className="step-actions">
                <button type="button" className="ghost-button" onClick={handleBack} disabled={transitionStage !== 'idle'}>
                  返回
                </button>
                <button
