      cells.push({ date: next, outside: next.getMonth() !== viewMonth.getMonth() });
    }
    return cells;
  }, [viewMonth]);

  const isSameDay = (a, b) => (
    a.getFullYear() === b.getFullYear() &&
    a.getMonth() === b.getMonth() &&
    a.getDate() === b.getDate()
  );

  const handlePrevMonth = () => setViewMonth((m) => new Date(m.getFullYear(), m.getMonth() - 1, 1));
  const handleNextMonth = () => setViewMonth((m) => new Date(m.getFullYear(), m.getMonth() + 1, 1));

  const formatTime = (h, m) => {
    if (is24h) {
      return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}`;
    }
    const hour12 = (h % 12) || 12;
    const ampm = h < 12 ? 'AM' : 'PM';
    return `${String(hour12).padStart(2, '0')}:${String(m).padStart(2, '0')} ${ampm}`;
  };

  const timeSlots = useMemo(() => {
    const arr = [];
    for (let h = 9; h <= 23; h++) {
      for (let m = 0; m < 60; m += 15) {
        arr.push({ h, m, label: formatTime(h, m) });
      }
    }
    return arr;
  }, [is24h]);

  const ScheduleTimesPanel = () => {
    const weekday = zhDays[selectedDate.getDay()];
    const day = selectedDate.getDate();
    return (
      <div className="schedule-times-panel">
        <div className="times-panel-header">
          <div className="day-title">{weekday} {day}</div>
